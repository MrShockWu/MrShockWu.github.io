{"version":3,"sources":["webpack:///./src/app/pages/tzb/workflow/activiti-work-flow/common/constant/validator.constant.ts","webpack:///./src/app/pages/tzb/workflow/activiti-work-flow/common/constant/validator.utils.ts"],"names":[],"mappings":"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","file":"default~available-product-available-product-module~process-definition-process-definition-module~prod~f71e3a94.js","sourcesContent":["// 校验器 正则配置文件\r\nexport const COMMON_REGEXP = {\r\n  // 非法字符\r\n  specialCharacters: '[~#$%^&~#￥%&<>@\"{}\\']',\r\n  // 身份证\r\n  card: '^[1-9]\\\\d{5}(18|19|([23]\\\\d))\\\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$',\r\n  // 手机号\r\n  phone: '^1[3|4|5|7|8][0-9]{9}$',\r\n  // 邮箱\r\n  email: '^\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*$',\r\n  // 正整数\r\n  positiveInt: '^[1-9]{1}[0-9]*$',\r\n  // ip4\r\n  ip4: '^((25[0-5]|2[0-4]\\\\d|[1]{1}\\\\d{1}\\\\d{1}|[1-9]{1}\\\\d{1}|\\\\d{1})($|(?!\\\\.$)\\\\.)){4}$',\r\n  // 数字 字母（大小写）\r\n  id: '^[A-Za-z0-9]+$',\r\n  // 数字\r\n  idno: '^[0-9]+$',\r\n  // 密码全字符\r\n  pwdAll: '^[0-9A-Za-z~!@#￥%^&*]+$',\r\n  // 数字\r\n  num: '.*\\\\d.*',\r\n  // 大写字母\r\n  powerCase: '.*[A-Z].*',\r\n  // 小写字母\r\n  lowerCase: '.*[a-z].*',\r\n  // 特殊字符\r\n  pwdSpecialCharacters: '.*[~!@#￥%^&*].*',\r\n  // 弱密码校验\r\n  easyPwd: '([0-9A-Za-z~!@#￥%^&*])\\\\1{1,}([0-9A-Za-z~!@#￥%^&*])\\\\2{1,}',\r\n  // 密码重复校验\r\n  pwdValid1: '^(?<k1>[0-9])\\\\k<k1>{{length}}$',\r\n  // 密码必须含有数字和字母\r\n  pwdValid2: '^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]+$',\r\n  // 密码校验正则  数字  字母（大小写）\r\n  pwd: '^[A-Za-z0-9]+$',\r\n  // 英文名称\r\n  en: '^[A-Za-z]+$',\r\n  // 军官证\r\n  certificateOfficers: '^[a-zA-Z0-9]{7,21}$',\r\n  // 港澳通行证\r\n  hkAndMacaoPass: '^[HMhm]{1}([0-9]{10}|[0-9]{8})$',\r\n  // 台湾通行证号\r\n  taiwanPass: ['^[0-9]{8}$', '^[0-9]{10}$'],\r\n  // 护照号  中华人民共和国因私护照\r\n  privatePassport: '^(1[45][0-9]{7}|G[0-9]{8})+$',\r\n  // 护照号 中华人民共和国因公护照\r\n  passport: '^(P[0-9]{7}|S[0-9]{7,8})+$',\r\n  // 护照号  外国护照\r\n  foreignPassport: '^D[0-9]+$',\r\n  // 外国人永久居留证\r\n  residencePermit: '^[a-zA-Z]{3}\\\\d{12}$',\r\n  // 中文字符\r\n  flowCode: '^[a-zA-Z_][a-zA-Z0-9_-]+$'\r\n};\r\n","import { FormControl, FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { COMMON_REGEXP } from './validator.constant';\r\n\r\n// 校验特殊字符    form表单的校验\r\nexport const checkSpecialCharacter = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  return checkSpecialCharacterStr(val);\r\n};\r\n\r\n// 校验特殊字符 单个input对value的校验\r\nexport const checkSpecialCharacterStr = (value: string) => {\r\n  const reg = new RegExp(COMMON_REGEXP.specialCharacters);\r\n  return reg.test(value) ? { scError: { errorMsg: '非法字符:~#$%^&~#￥%&@<>\"{}' } } : null;\r\n};\r\n\r\n// 身份证\r\nexport const checkCard = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.card);\r\n  return reg.test(val) ? {} : { message: '身份证号不合法' };\r\n};\r\n\r\n// 手机号多个校验  多个手机号逗号隔开 空格算输入字符\r\nexport const checkMoreTel = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  if (!val) {\r\n    return { mobile: { message: '手机号不合法' } };\r\n  }\r\n\r\n  const telArray: string[] = val.split(',');\r\n  const reg = new RegExp(COMMON_REGEXP.phone);\r\n  for (let i = 0; i < telArray.length; i++) {\r\n    if (!reg.test(telArray[i])) {\r\n      return { mobile: { message: '手机号不合法' } };\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 手机号单个校验  空格算输入字符  连续N个空格 校验不通过\r\nexport const checkTel = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  if (val === undefined || val === null || val === '') {\r\n    return null;\r\n  }\r\n  const reg = new RegExp(COMMON_REGEXP.phone);\r\n  return reg.test(val) ? null : { mobile: { message: '手机号不合法' } };\r\n};\r\n\r\n// email校验  空格算输入字符  连续N个空格校验不通过\r\nexport const checkEmail = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  if (val === undefined || val === null || val === '') {\r\n    return null;\r\n  }\r\n  const reg = new RegExp(COMMON_REGEXP.email);\r\n  return reg.test(val) ? null : { email: { message: '邮箱不合法' } };\r\n};\r\n\r\n// 校验正整数\r\nexport const checkPositiveInt = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  if (val === undefined || val === null || val === '') {\r\n    return null;\r\n  }\r\n  const reg = new RegExp(COMMON_REGEXP.positiveInt);\r\n  return reg.test(val) ? null : { positiveInt: { message: '请输入正整数' } };\r\n};\r\n\r\n// 校验空格  前后空格  全空格非法   中间空格不非法\r\nexport const checkSpace = (control: AbstractControl) => {\r\n  return checkSpaceStr(control.value);\r\n};\r\n\r\n// 校验空格  前后空格  全空格非法   中间空格不非法\r\nexport const checkSpaceStr = (val: string) => {\r\n  let res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n  // trime后  长度和以前的不一样  非法\r\n  if (val.length !== val.trim().length) {\r\n    res = { spaceError: { message: '前后空格，全空格非法' } };\r\n  }\r\n  return res;\r\n};\r\n\r\n\r\n// 校验ip4\r\nexport const checkIp4 = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n\r\n  const reg = new RegExp(COMMON_REGEXP.ip4);\r\n  return reg.test(val) ? null : { ip4: { message: 'ip格式错误' } };\r\n};\r\n\r\n// 校验id  只能数字  字母大小写\r\nexport const checkId = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n\r\n  const reg = new RegExp(COMMON_REGEXP.id);\r\n  return reg.test(val) ? null : { id: { message: '只能输入数字，大小写字母' } };\r\n};\r\n\r\n// 校验id  只能数字\r\nexport const checkNoId = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n\r\n  const reg = new RegExp(COMMON_REGEXP.idno);\r\n  return reg.test(val) ? null : { id: { message: '只能输入数字' } };\r\n};\r\n\r\n// 校验密码  只能数字  字母大小写\r\nexport const checkOldPwd = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n\r\n  const reg = new RegExp(COMMON_REGEXP.pwd);\r\n  return reg.test(val) ? null : { pwd: { message: '只能输入数字，大小写字母' } };\r\n};\r\n\r\n// 校验密码  只能数字或只能数字+字母大小写\r\nexport function checkNewPwd(pwdStrategy: any): ValidatorFn {\r\n  const pwdS = pwdStrategy;\r\n  return (control: AbstractControl): { [key: string]: any } => {\r\n    const val = control.value;\r\n    const res = null;\r\n    if (val === undefined || val === null || val === '') {\r\n      return res;\r\n    } else {\r\n      const reg0 = new RegExp(COMMON_REGEXP.num);\r\n      const reg1 = new RegExp(COMMON_REGEXP.powerCase);\r\n      const reg2 = new RegExp(COMMON_REGEXP.lowerCase);\r\n      const reg3 = new RegExp(COMMON_REGEXP.idno);\r\n      const reg4 = new RegExp(COMMON_REGEXP.easyPwd);\r\n      const reg = new RegExp(COMMON_REGEXP.pwdAll);\r\n      if (pwdS.indexOf('0') !== -1 && !reg0.test(val)) {\r\n        return { pwd: { message: '密码必须含有数字' } };\r\n      }\r\n      if (pwdS.indexOf('1') !== -1 && !reg1.test(val)) {\r\n        return { pwd: { message: '密码必须含有大写字母' } }\r\n      }\r\n      if (pwdS.indexOf('2') !== -1 && !reg2.test(val)) {\r\n        return { pwd: { message: '密码必须含有小写字母' } }\r\n      }\r\n      if (pwdS.indexOf('3') !== -1 && !reg3.test(val)) {\r\n        return { pwd: { message: '密码必须含有特殊字符【~!@#￥%^&*】' } }\r\n      }\r\n      if (reg4.test(val)) {\r\n        return { pwd: { message: '密码过于简单，请重新设置' } }\r\n      }\r\n      if (pwdS) {\r\n        return reg.test(val) ? null : { pwd: { message: '密码只能输入大小写字母数字或特殊字符【~!@#￥%^&*】' } };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// 校验英文\r\nexport const checkEn = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const res = null;\r\n  if (val === undefined || val === null || val === '') {\r\n    return res;\r\n  }\r\n\r\n  const reg = new RegExp(COMMON_REGEXP.en);\r\n  return reg.test(val) ? null : { en: { message: '只能输入英文字母' } };\r\n};\r\n\r\n// 军官证\r\nexport const checkCertificateOfficers = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.certificateOfficers);\r\n  return reg.test(val) ? {} : { message: '军官证不合法' };\r\n};\r\n\r\n// 港澳通行证\r\nexport const checkHkAndMacaoPass = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.hkAndMacaoPass);\r\n  return reg.test(val) ? {} : { message: '港澳通行证不合法' };\r\n};\r\n\r\n// 台湾通行证号\r\nexport const checkTaiwanPass = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg1 = new RegExp(COMMON_REGEXP.taiwanPass[0]);\r\n  const reg2 = new RegExp(COMMON_REGEXP.taiwanPass[1]);\r\n  return reg1.test(val) || reg2.test(val) ? {} : { message: '台湾通行证号不合法' };\r\n};\r\n\r\n// 护照号  中华人民共和国因私护照\r\nexport const checkPrivatePassport = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.privatePassport);\r\n  return reg.test(val) ? {} : { message: '中华人民共和国因私护照不合法' };\r\n};\r\n\r\n// 中华人民共和国因公护照\r\nexport const checkPassport = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.passport);\r\n  return reg.test(val) ? {} : { message: '中华人民共和国因公护照不合法' };\r\n};\r\n\r\n// 外国护照\r\nexport const checkForeignPassport = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.foreignPassport);\r\n  return reg.test(val) ? {} : { message: '外国护照不合法' };\r\n};\r\n\r\n// 外国人永久居留证\r\nexport const checkResidencePermit = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.residencePermit);\r\n  return reg.test(val) ? {} : { message: '外国人永久居留证不合法' };\r\n};\r\n\r\n// 机密机端口校验\r\nexport const checkhsmPort = (control: AbstractControl) => {\r\n  const val = parseInt(control.value);\r\n  if (val < 1 || val > 65535) {\r\n    return { hsmPort: { message: '加密机端口不在范围内' } };\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n// 流程编码校验（字母、数字、下划线）\r\nexport const checkFlowCode = (control: AbstractControl) => {\r\n  const val = control.value;\r\n  const reg = new RegExp(COMMON_REGEXP.flowCode);\r\n  return reg.test(val) ? null : { message: '流程编码不合法' };\r\n};\r\n\r\n\r\n"],"sourceRoot":""}